{"version":3,"sources":["assets/welcomeScreenImage.png","firebase.js","StartScreen.js","JoinGame.js","WaitingForPlayer.js","PlayerHand.js","WaitingForCards.js","DealerHand.js","GameTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","StartScreen","props","submit","change","click","className","src","require","alt","onSubmit","type","id","onChange","placeholder","value","onClick","JoinGame","WaitingForPlayer","PlayerHand","Component","state","handValue","this","evaluateHand","cardValues","console","log","setState","cardImages","DealerHand","GameTable","playerNumber","player1CardImages","card1","card2","playersReady","player1","player1Cards","clickDeal","endGame","player2","player2Cards","player1HasImages","dealerCards","dealerCardValues","dealerCardImages","player1CardValues","player2HasImages","App","renderTrigger","blackjack","handleChangePlayerName","event","playerName","target","handleChangeGameID","gameIDInput","nameCheck","Swal","fire","icon","title","showClass","popup","hideClass","handleSubmitNewGame","preventDefault","getData","then","result","game","data","defaultProfile","gameID","deck_id","userName","status","hand","database","ref","set","defaultDealerProfile","html","startScreen","waitingForPlayerScreen","catch","error","handleClick","joinGameScreen","handleSubmitJoinGame","text","footer","playersPresent","setTimeout","ready","update","handleClickDeal","cards","code","takePlayer1Cards","player1hand","image","takePlayer2Cards","player2hand","player2CardValues","takeDealerCards","dealerHand","getCardImages","player","on","val","player2CardImages","dealerHasImages","evalHand","handArray","valueArray","map","card","singleCardArray","Array","from","parseValue","parseInt","includes","isArray","handleClickClose","window","location","reload","cardsDealt","player1Ready","player2Ready","snapshot","deck","action","axios","url","method","dataResponse","handleClickReady","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.4968fe8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/welcomeScreenImage.6e11f215.png\";","import firebase from \"firebase/app\"\r\nimport \"firebase/database\"\r\n\r\n// < !--The core Firebase JS SDK is always required and must be listed first-- >\r\n//     <script src=\"https://www.gstatic.com/firebasejs/7.5.0/firebase-app.js\"></script>\r\n\r\n//     <!--TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries -->\r\n\r\n// <script>\r\n//     // Your web app's Firebase configuration\r\n//     var firebaseConfig = {\r\n//         apiKey: \"AIzaSyAkUgykm58rpozMvbKEcvg7cu90fLfo1Qs\",\r\n//     authDomain: \"blackjack-app-28b80.firebaseapp.com\",\r\n//     databaseURL: \"https://blackjack-app-28b80.firebaseio.com\",\r\n//     projectId: \"blackjack-app-28b80\",\r\n//     storageBucket: \"blackjack-app-28b80.appspot.com\",\r\n//     messagingSenderId: \"156419063806\",\r\n//     appId: \"1:156419063806:web:cd623fbd72f2274b968aaf\"\r\n//   };\r\n//   // Initialize Firebase\r\n//   firebase.initializeApp(firebaseConfig);\r\n// </script>\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAkUgykm58rpozMvbKEcvg7cu90fLfo1Qs\",\r\n    authDomain: \"blackjack-app-28b80.firebaseapp.com\",\r\n    databaseURL: \"https://blackjack-app-28b80.firebaseio.com\",\r\n    projectId: \"blackjack-app-28b80\",\r\n    storageBucket: \"blackjack-app-28b80.appspot.com\",\r\n    messagingSenderId: \"156419063806\",\r\n    appId: \"1:156419063806:web:cd623fbd72f2274b968aaf\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React from \"react\";\r\n\r\nconst StartScreen = (props) => {\r\n    const { submit, change, click } = props;\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <h1>Blackjack Buddies</h1>\r\n            <img src={require(\"./assets/welcomeScreenImage.png\")} alt=\"Ace of spades and jack of spades playing cards\" className=\"logoImage\"/>\r\n            <div className=\"instructions\">\r\n                <h3>Welcome to Blackjack Buddies</h3>\r\n                <p>To begin a game, please enter your name in the form below and click the <span>new game</span> button</p>\r\n                <p>Looking to join a friend's game? Simply enter your name in the form and click the <span>join a game</span> button</p>\r\n            </div>\r\n            <div className=\"fieldset\">\r\n            <fieldset>\r\n                <legend>Enter your player name</legend>\r\n                <form onSubmit={submit} className=\"nameForm\">\r\n                    <input type=\"text\" id=\"playerName\" onChange={change} placeholder=\"Type a player name here\"/>\r\n                    <button type=\"submit\" value=\"newGame\" className=\"button\">new game</button>\r\n                    <button type=\"button\" value=\"joinAGame\" onClick={click} className=\"button\">join a game</button>\r\n                </form>\r\n            </fieldset>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StartScreen;","import React from \"react\";\r\n\r\n\r\nconst JoinGame = (props) => {\r\n    const { submit, change } = props;\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <h1>Blackjack Buddies</h1>\r\n            <img src={require(\"./assets/welcomeScreenImage.png\")} alt=\"Ace of spades and jack of spades playing cards\" className=\"logoImage\" />\r\n            <div className=\"instructions\">\r\n                <h3>Blackjack Buddies - Join a Game</h3>\r\n                <p>Please enter the game ID in the form and click the <span>join game</span> button</p>\r\n            </div>\r\n            <div className=\"fieldset\">\r\n                <fieldset>\r\n                    <legend>Enter the game ID</legend>\r\n                    <form onSubmit={submit} className=\"joinForm\">\r\n                        <input type=\"text\" id=\"gameID\" onChange={change} placeholder=\"Please enter game ID\"/>\r\n                        <button type=\"submit\" value=\"joinGame\" className=\"button\">join game</button>\r\n                    </form>\r\n                </fieldset>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default JoinGame;","import React from \"react\";\r\n\r\n\r\nconst WaitingForPlayer = () => {\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <h1>Blackjack Buddies</h1>\r\n            <img src={require(\"./assets/welcomeScreenImage.png\")} alt=\"Ace of spades and jack of spades playing cards\" className=\"logoImage\" />\r\n            <div className=\"instructions\">\r\n                <h3>Shuffling Deck</h3>\r\n                <p>Waiting for other player</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default WaitingForPlayer;","import React, { Component } from \"react\"\r\n\r\nclass PlayerHand extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            handValue: 0,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const value = this.props.evaluateHand(this.props.cardValues);\r\n        console.log(\"hand value\", value);\r\n        this.setState({\r\n            handValue: value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cards\">\r\n                <div className=\"card1\">\r\n                    <img src={this.props.cardImages[0]} alt=\"\" />\r\n                </div>\r\n                <div className=\"card2\">\r\n                    <img src={this.props.cardImages[1]} alt=\"\" />\r\n                </div>\r\n                <div className=\"value\">\r\n                    <p>Value: {this.state.handValue}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlayerHand;","import React, { Component } from \"react\"\r\n\r\nclass WaitingForCards extends Component {\r\n    render() {\r\n        return (\r\n                <div>\r\n                    <h1>Blackjack Buddies</h1>\r\n\r\n                    \r\n                    <h3>Waiting for the dealer to deal the cards...</h3>\r\n                </div>\r\n            );\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default WaitingForCards;","import React, { Component } from \"react\"\r\n\r\nclass DealerHand extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            handValue: 0,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const value = this.props.evaluateHand(this.props.cardValues);\r\n        console.log(\"hand value\", value);\r\n        this.setState({\r\n            handValue: value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cards\">\r\n                <div className=\"card1\">\r\n                    <img src={this.props.cardImages[0]} alt=\"\" />\r\n                </div>\r\n                <div className=\"card2\">\r\n                    <img src={this.props.cardImages[1]} alt=\"\" />\r\n                </div>\r\n                <div className=\"value\">\r\n                    <p>Value: {this.state.handValue}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DealerHand;","import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport PlayerHand from \"./PlayerHand.js\"\r\nimport DealerHand from \"./DealerHand.js\"\r\n\r\nclass GameTable extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            playerNumber: \"\"\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    render() {\r\n        const card1ImageElement = `<img src=\"${this.props.player1CardImages.card1}\"/>`\r\n        const card2ImageElement = `<img src=\"${this.props.player1CardImages.card2}\"/>`\r\n\r\n        if (this.props.playersReady && this.props.player1 && !this.props.player1Cards) {\r\n            return (\r\n                <div className=\"wrapper\">\r\n                    <div>\r\n                        <h1>Blackjack Buddies</h1>\r\n                        <img src={require(\"./assets/welcomeScreenImage.png\")} alt=\"Ace of spades and jack of spades playing cards\" className=\"logoImage\" />\r\n                    </div>\r\n                    {/* <FontAwesomeIcon icon=\"window-close\" /> */}\r\n                    <div className=\"instructions\">\r\n                        <h3>As soon as you're feeling lucky hit the <span>deal</span> button.</h3>\r\n                        <h3>Not your time to shine? Hit the <span>end game</span> button</h3>\r\n                        <button onClick={this.props.clickDeal} className=\"button\">deal</button>\r\n                        <button onClick={this.props.endGame} className=\"button\">end game</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else if (this.props.playersReady && this.props.player2 && !this.props.player2Cards) {\r\n            return (\r\n                <div className=\"wrapper\">\r\n                    <div>\r\n                        <h1>Blackjack Buddies</h1>\r\n                        <img src={require(\"./assets/welcomeScreenImage.png\")} alt=\"Ace of spades and jack of spades playing cards\" className=\"logoImage\" />\r\n                    </div>\r\n                    <div className=\"instructions\">\r\n                        <h3>Waiting for the dealer to deal the cards...</h3>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else if (this.props.playersReady && this.props.player1 && this.props.player1Cards && this.props.player2Cards) {\r\n            if (!this.props.player1HasImages) {\r\n                this.props.cardImages(\"player1\")\r\n                this.props.cardImages(\"dealer\")\r\n\r\n                return (\r\n                    <div>\r\n                        <button onClick={this.props.endGame}>end game</button>\r\n                        <h1>images func is getting by...</h1>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div>\r\n                        {this.props.dealerCards ? (<DealerHand \r\n                        cardValues={this.props.dealerCardValues}\r\n                        cardImages={this.props.dealerCardImages}\r\n                        evaluateHand={this.props.evaluateHand}\r\n                        />) : null}\r\n    \r\n                        {this.props.player1Cards ? (<PlayerHand \r\n                        cardValues={this.props.player1CardValues}\r\n                        cardImages={this.props.player1CardImages}\r\n                        evaluateHand={this.props.evaluateHand}\r\n                        />) : null}\r\n\r\n                        <button onClick={this.props.endGame} className=\"button\">end game</button>\r\n                    </div>\r\n                )\r\n            }\r\n        } else if (this.props.playersReady && this.props.player2 && this.props.player1Cards && this.props.player2Cards) {\r\n            if (!this.props.player2HasImages) {\r\n                this.props.cardImages(\"player2\")\r\n                return (\r\n                    <div>\r\n                        <button onClick={this.props.endGame}>end game</button>\r\n                        <h1>images func is also getting by here...</h1>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div>\r\n                        <button onClick={this.props.endGame}>end game</button>\r\n                        <h1>have images</h1>\r\n                    </div>\r\n                )\r\n            }\r\n        } else {\r\n            return (\r\n                null\r\n            )\r\n        }\r\n    };\r\n};\r\n\r\nexport default GameTable;","import React, { Component } from 'react';\nimport firebase from \"./firebase.js\";\nimport { Animated } from \"react-animated-css\";\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\nimport ReactDOM from 'react-dom'\nimport { library } from '@fortawesome/fontawesome-svg-core'\n// import { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons'\nimport axios from \"axios\";\nimport StartScreen from \"./StartScreen.js\";\nimport JoinGame from \"./JoinGame.js\";\nimport WaitingForPlayer from \"./WaitingForPlayer.js\";\nimport WaitingForCards from \"./WaitingForCards.js\"\nimport GameTable from \"./GameTable.js\"\nimport './App.css';\nimport { readSync } from 'fs';\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      blackjack: \"\",\n      game: null,\n      cardsDealt: false,\n      player1: false,\n      player2: false,\n      player1Cards: false,\n      player2Cards: false,\n      dealerCards: false,\n      player1CardValues: [],\n      player2CardValues: [],\n      dealerCardValues: [],\n      player1CardImages: {},\n      player2CardImages: {},\n      dealerCardImages: {},\n      player1HasImages: false,\n      player2HasImages: false,\n      dealerHasImages: false,\n      player1Ready: false,\n      player2Ready: false,\n      playersReady: false,\n      playerName: \"\",\n      gameIDInput: \"\",\n      playersPresent: false,\n      startScreen: true,\n      joinGameScreen: false,\n      waitingForPlayerScreen: false,\n    };\n  };\n\n\n\n  componentDidMount() {\n    // FIREBASE======================================\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", (snapshot) => {\n      const database = snapshot.val()\n      console.log(\"database\", database)\n\n      if (!this.state.playersPresent) {\n        this.playersPresent(database);\n      }\n\n      if (!this.state.cardsDealt && database.game.status == \"in progress\") {\n        this.setState({\n          cardsDealt: true\n        })\n      }\n      this.renderTrigger()\n    });\n    // ==============================================\n    \n  };\n  // library.add(faWindowClose)\n  \n\n  renderTrigger = () => {\n    this.setState({\n      blackjack: true\n    })\n  }\n  \n  // AXIOS==============================================\n    // call api for new deck on game start--------------\n  async getData(deck, action) {\n    const result = await axios({\n      url: `https://deckofcardsapi.com/api/deck/${deck}/${action}`,\n      method: `GET`,\n      dataResponse: `json`\n    });\n    return await result\n  };\n  // ====================================================\n\n  \n  \n  // PLAYER NAME==========================================\n    // read user input for name and save to state--------\n  handleChangePlayerName = (event) => {\n    this.setState({\n      playerName: event.target.value\n    });\n  };\n  // ======================================================\n  \n  \n\n  // GAME ID==============================================\n    // read user input for game id and save to state\n  handleChangeGameID = (event) => {\n    this.setState({\n      gameIDInput: event.target.value\n    });\n  };\n  // ========================================================\n  \n  \n  \n  // NAME CHECK ERROR DIALOG=================================\n    // error dialog window displayed if user does not input a name\n  nameCheck = () => {\n    Swal.fire({\n      icon: 'error',\n      title: 'Please enter a user name to begin',\n      showClass: {\n        popup: 'animated fadeInDown faster'\n      },\n      hideClass: {\n        popup: 'animated fadeOutUp faster'\n      }\n    });\n  };\n  // ========================================================\n  \n  \n  // NEW GAME================================================\n    // user wants to start new game---------------------------\n  handleSubmitNewGame = (event) => {\n    event.preventDefault();\n    \n    // check if user entered a name, then make api call and instantiate player1 object in firebase\n    if (this.state.playerName !== \"\") {\n      const action = \"shuffle/?deck_count=1\";\n      this.getData(\"new\", action).then(result => {\n        this.setState({game: result.data});\n\n        const defaultProfile = {\n          gameID: this.state.game.deck_id,\n          userName: this.state.playerName,\n          status: \"initialize\",\n          hand: [\"empty\"]\n        }\n\n        firebase.database().ref(`/player1`).set(defaultProfile)\n\n        const defaultDealerProfile = {\n          gameID: this.state.game.deck_id,\n          userName: \"Dealer\",\n          status: \"initialize\",\n          hand: [\"empty\"]\n        }\n\n        firebase.database().ref(`/dealer`).set(defaultDealerProfile)\n\n        \n        Swal.fire({\n          icon: 'success',\n          title: 'The Blackjack table will open momentarily',\n          html: `Please send your friend the game ID: <b>${this.state.game.deck_id}</b>`,\n          showClass: {\n            popup: 'animated fadeInDown faster'\n          },\n          hideClass: {\n            popup: 'animated fadeOutUp faster'\n          }\n        })\n        \n        this.setState({\n          player1: true,\n          startScreen: false,\n          waitingForPlayerScreen: true\n        })\n      })\n      .catch(error => {console.log(\"axios error\", error)})\n    } else {\n      this.nameCheck();\n    };\n  };\n  // ========================================================\n  \n\n\n  // JOIN GAME===============================================\n    // user wants to join an existing game\n  handleClick = (event) => {\n    // check if user entered a name\n    if (this.state.playerName !== \"\") {\n      this.setState({\n        startScreen: false,\n        joinGameScreen: true\n      });\n    } else {\n      this.nameCheck();\n    };\n  };\n  // ========================================================\n    \n  \n  \n  // JOIN A GAME=============================================\n    // user has entered an existing game ID and wants to join game\n  handleSubmitJoinGame = (event) => {\n    event.preventDefault();\n    \n    if (this.state.gameIDInput !== \"\") {\n      const action = \"shuffle/?deck_count=1\";\n      this.getData(this.state.gameIDInput, action).then(result => {\n        this.setState({ game: result.data });\n\n        const defaultProfile = {\n          gameID: this.state.game.deck_id,\n          userName: this.state.playerName,\n          status: \"initialize\",\n          hand: [\"empty\"]\n      };\n      \n      firebase.database().ref(`/player2`).set(defaultProfile);\n      \n      Swal.fire({\n        icon: 'success',\n        title: 'The Blackjack table will open momentarily',\n        showClass: {\n          popup: 'animated fadeInDown faster'\n        },\n        hideClass: {\n          popup: 'animated fadeOutUp faster'\n        }\n      });\n      \n      this.setState({\n        player2: true,\n        joinGameScreen: false,\n        waitingForPlayerScreen: true\n      })\n      \n      })\n      .catch((error) => {\n        console.log(\"axios error\", error)\n\n        Swal.fire({\n          icon: 'error',\n          title: 'There is no existing game matching that ID.',\n          text: 'Please check the ID and try again',\n          footer: `${error}`,\n          showClass: {\n            popup: 'animated fadeInDown faster'\n          },\n          hideClass: {\n            popup: 'animated fadeOutUp faster'\n          }\n        });\n      })\n    } else {\n      Swal.fire({\n        icon: 'error',\n        title: 'Please enter a game ID to begin',\n        showClass: {\n          popup: 'animated fadeInDown faster'\n        },\n        hideClass: {\n          popup: 'animated fadeOutUp faster'\n        }\n      });\n    };\n  };\n  // ========================================================\n\n\n\n  // PLAYERS PRESENT===========================================\n    // check if both players present, if so render game table\n  playersPresent = (database) => {\n    setTimeout(() => {\n\n      if (\"player1\" in database) {\n        if (\"player2\" in database) {\n          this.setState({\n            waitingForPlayerScreen: false,\n            playersPresent: true,\n            playersReady: true\n          });\n          const ready = { status: \"pending\" };\n          firebase.database().ref('/player1').update(ready)\n          firebase.database().ref('/player2').update(ready)\n\n        };\n      };\n    }, 2000);\n  };\n  // ========================================================\n\n\n\n  // DEAL THE CARDS==========================================\n  handleClickDeal = (event) => {\n    const dealPlayer1Cards = \"draw/?count=2\";\n    this.getData(this.state.game.deck_id, dealPlayer1Cards).then((result) => {\n      console.log(\"deal p1 result\", result)\n\n      const card1 = result.data.cards[0].code;\n      const card2 = result.data.cards[1].code;\n      const takePlayer1Cards = `pile/player1/add/?cards=${card1},${card2}`;\n      this.getData(this.state.game.deck_id, takePlayer1Cards).then((result) => {\n        console.log(\"player 1 hand\", card1, card2)\n      })\n      \n      const card1image = result.data.cards[0].image\n      const card2image = result.data.cards[1].image\n      const player1hand = { hand: [card1image, card2image] }\n      firebase.database().ref('/player1').update(player1hand)\n\n      this.setState({\n        player1Cards: true,\n        player1CardValues: [card1, card2]\n      })\n    })\n\n    const dealPlayer2Cards = \"draw/?count=2\";\n    this.getData(this.state.game.deck_id, dealPlayer2Cards).then((result) => {\n      console.log(\"deal p2 result\", result)\n\n      const card1 = result.data.cards[0].code;\n      const card2 = result.data.cards[1].code;\n      const takePlayer2Cards = `pile/player2/add/?cards=${card1},${card2}`;\n      this.getData(this.state.game.deck_id, takePlayer2Cards).then((result) => {\n        console.log(\"player 2 hand\", card1, card2)\n      })\n\n      const card1image = result.data.cards[0].image\n      const card2image = result.data.cards[1].image\n      const player2hand = { hand: [card1image, card2image] }\n      firebase.database().ref('/player2').update(player2hand)\n\n      this.setState({\n        player2Cards: true,\n        player2CardValues: [card1, card2]\n      })\n    })\n\n    const dealDealerCards = \"draw/?count=2\";\n    this.getData(this.state.game.deck_id, dealDealerCards).then((result) => {\n      console.log(\"deal dealer result\", result)\n\n      const card1 = result.data.cards[0].code;\n      const card2 = result.data.cards[1].code;\n      const takeDealerCards = `pile/player1/add/?cards=${card1},${card2}`;\n      this.getData(this.state.game.deck_id, takeDealerCards).then((result) => {\n        console.log(\"dealer hand\", card1, card2)\n      })\n\n      const card1image = result.data.cards[0].image\n      const card2image = result.data.cards[1].image\n      const dealerHand = { hand: [card1image, card2image] }\n      firebase.database().ref('/dealer').update(dealerHand)\n\n      const ready = { status: \"in progress\" };\n      firebase.database().ref('/game').update(ready)\n\n      this.setState({\n        dealerCards: true,\n        dealerCardValues: [card1, card2]\n      })\n    })\n  }\n  // ========================================================\n  \n\n\n  // GET CARD IMAGES=========================================\n  getCardImages = (player) => {\n    const cardImagesObject = firebase.database().ref(`/${player}/hand`).on(\"value\", data => {\n      console.log(\"firebase card image data\", data.val())\n      if (player === \"player1\") {\n        this.setState({\n          player1CardImages: data.val(),\n          player1HasImages: true\n        })\n      } else if (player === \"player2\") {\n        this.setState({\n          player2CardImages: data.val(),\n          player2HasImages: true\n        })\n      } else if (player === \"dealer\") {\n        this.setState({\n          dealerCardImages: data.val(),\n          dealerHasImages: true\n        })\n      }\n    })\n  }\n  // ========================================================\n\n\n\n  // HAND VALUATION==========================================\n  evalHand = (handArray) => {\n    const oldArray = [...handArray];\n    let valueArray = oldArray.map((card) => {\n      const singleCardArray = Array.from(card)\n      console.log(\"single card array\", singleCardArray)\n      const parseValue = parseInt(singleCardArray[0])\n      console.log(\"parse value\", parseValue)\n      const faceCardsArray = [\"A\", \"J\", \"Q\", \"K\"]\n      if (faceCardsArray.includes(singleCardArray[0]) && singleCardArray[0] !== \"A\") {\n        return 10;\n      } else if (singleCardArray[0] === \"A\") {\n        return [11, 1]\n      } else {\n        if (parseValue === 0) {\n          return 10;\n        } else {\n          return parseValue;\n        }\n      }\n    })\n\n    if (Array.isArray(valueArray[0]) || Array.isArray(valueArray[1])) {\n      if (Array.isArray(valueArray[0]) && Array.isArray(valueArray[1])) {\n        valueArray[0] = 1\n      } else if (Array.isArray(valueArray[0])) {\n        if ((11 + valueArray[1]) > 21) {\n          valueArray[0] = 1\n        } else {\n          valueArray[0] = 11\n        }\n      } else if (Array.isArray(valueArray[1])) {\n        if ((valueArray[0] + 11) > 21) {\n          valueArray[1] = 1\n        } else {\n          valueArray[1] = 11\n        }\n      }\n    }\n\n    const handValue = valueArray[0] + valueArray[1];\n    return handValue;\n  }\n  // ========================================================\n\n\n\n  // END GAME================================================\n  handleClickClose = (event) => {\n    const defaultFirebase = {\n      game: {\n        status: \"ready\"\n      }\n    }\n    firebase.database().ref().set(defaultFirebase)\n    window.location.reload(false);\n  }\n  // ========================================================\n\n\n\n  // RENDER==================================================\n  render() {\n    return (\n      <div className=\"App\">\n          {this.state.startScreen && <StartScreen submit={this.handleSubmitNewGame} change={this.handleChangePlayerName} click={this.handleClick} />}\n\n          {this.state.joinGameScreen && <JoinGame submit={this.handleSubmitJoinGame} change={this.handleChangeGameID}/>}\n        \n          {this.state.waitingForPlayerScreen && <WaitingForPlayer gameID={this.state.game.deck_id}/>}\n\n          {this.state.playersPresent && <GameTable \n          player1={this.state.player1} \n          player2={this.state.player2} \n          playersReady={this.state.playersReady} \n          click={this.handleClickReady} \n          clickDeal={this.handleClickDeal} \n          player1Cards={this.state.player1Cards} \n          player2Cards={this.state.player2Cards}\n          dealerCards={this.state.dealerCards}\n          player1CardValues={this.state.player1CardValues}\n          player2CardValues={this.state.player2CardValues}\n          dealerCardValues={this.state.dealerCardValues}\n          cardImages={this.getCardImages}\n          player1CardImages={this.state.player1CardImages}\n          player2CardImages={this.state.player2CardImages}\n          dealerCardImages={this.state.dealerCardImages}\n          player1HasImages={this.state.player1HasImages}\n          player2HasImages={this.state.player2HasImages}\n          dealerHasImages={this.state.dealerHasImages}\n          evaluateHand={this.evalHand}\n          endGame={this.handleClickClose}\n          />}\n\n      </div>\n    );\n  };\n};\n// =========================================================\n\n\n\n// EXPORT DEFAULT===========================================\nexport default App;\n// =========================================================\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}